<!doctype html>
<html lang="en">
	<head>
		<meta charset="utf-8">
		<meta name="viewport" content="width=device-width, initial-scale=1">
		<title>Template â€¢ TodoMVC</title>
		<link rel="stylesheet" href="https://unpkg.com/todomvc-common/base.css">
		<link rel="stylesheet" href="https://unpkg.com/todomvc-app-css/index.css">
	</head>
	<body>
		<section class="todoapp">
			<header class="header">
				<h1>todos</h1>
				<input  id:scoped="title"
                        key="title"
                        class="new-todo"
                        placeholder="What needs to be done?"
                        autofocus
                        on-keypress("checkAddInputKeyPressed")>

			</header>
			<!-- This section should be hidden by default and shown when there are todos -->
			<section class="main">
				<input class="toggle-all" type="checkbox">
				<label for="toggle-all">Mark all as complete</label>

				<ul class="todo-list">
					<!-- These are here just to show the structure of the list items -->
					<!-- List items should get the class `editing` when editing and `completed` when marked as completed -->
					<for|task| of=state.tasks>
                        <li key="li_${task.id}" class="view">
                            <div class="view">
                                <label on-dblclick("changeEditing", "${task.id}")>${task.title}</label>
                                <button class="destroy" on-click("deleteTask","${task.id}")></button>
                            </div>
                            <input key="input_${task.id}" class="edit" value="${task.title}" on-keypress("checkUpdateInputKeyPressed","${task.id}")>
                        </li>
					</for>
				</ul>
			</section>
			<!-- This footer should be hidden by default and shown when there are todos -->
			<footer class="footer">
				<!-- This should be `0 items left` by default -->
				<span class="todo-count"><strong>0</strong> item left</span>
			</footer>
		</section>
		<footer class="info">
			<p>Double-click to edit a todo</p>
			<p>Template by <a href="http://sindresorhus.com">Sindre Sorhus</a></p>
			<p>Created by <a href="http://todomvc.com">Hyuk</a></p>
			<p>Part of <a href="http://todomvc.com">TodoMVC</a></p>
		</footer>
	</body>
</html>

import axios from 'axios';

class {
    onCreate(){
        this.state = {
            tasks: [],
        };
        this.loadTasks();
    }

    async loadTasks(){
        const { data } = await axios.get('http://localhost:8080/tasks')
        this.state.tasks = data;
    }

    async addTask(){
        const title = this.getEl('title').value;
        await axios.post('http://localhost:8080/tasks', {
            title : title,
        });
        this.loadTasks();
    }

    async deleteTask(id){
        await axios.delete(`http://localhost:8080/tasks/${id}`);
        this.loadTasks();
    }

    async updateTask(id){
        const title = this.getEl(`input_${id}`).value;
        await axios.put(`http://localhost:8080/tasks/${id}`,{title:title});
        this.changeView(id)
        this.loadTasks();
    }

    checkAddInputKeyPressed(event) {
        if (event.keyCode == 13) {
            this.addTask();
        }
    }
    checkUpdateInputKeyPressed(id, event) {
      if (event.keyCode == 13) {
          this.updateTask(id);
      }
    }

    changeEditing(id) {
        const element_update = this.getEl(`li_${id}`);
        element_update.className = "editing";
    }

    changeView(id) {
        const element_update = this.getEl(`li_${id}`);
        element_update.className = "view";
    }
}